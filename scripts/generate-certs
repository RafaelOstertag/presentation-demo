#!/usr/bin/bash
#
# Create Demo CA and openvpn server certificate.

set -e

. scripts/shlib

function generate_config() {
    output 'Create Config'

    rm -f certs/*
    touch certs/index.txt certs/index.txt.attr
    cat > certs/openssl.conf <<EOF
[ ca ]
default_ca = CA_default

[ CA_default ]
dir = ./certs
database = \$dir/index.txt
serial = \$dir/serial
certificate = \$dir/ca_cert.pem
private_key = \$dir/ca_key.pem
default_md = SHA256
certs = \$dir/
new_certs_dir = \$dir
policy = name_policy

[ name_policy ]
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional


[ req ]
distinguished_name      = req_distinguished_name

[ req_distinguished_name ]
countryName                     = Country Name (2 letter code)
countryName_min                 = 2
countryName_max                 = 2

stateOrProvinceName             = State or Province Name (full name)


localityName                    = Locality Name (eg, city)

0.organizationName              = Organization Name (eg, company)

organizationalUnitName          = Organizational Unit Name (eg, section)

commonName                      = Common Name (eg, your name or your server\'s hostname)
commonName_max                  = 64

emailAddress                    = Email Address
emailAddress_max                = 64


[ no_ca ]
basicConstraints=CA:FALSE

[ ca_ext ]
basicConstraints=CA:TRUE
EOF
}

function make_dh_file() {
    output 'Create dh file'
    if [ ! -f certs/dh2048.pem ]
    then
	openssl dhparam -outform PEM -out certs/dh2048.pem 2048
    else
	echo "certs/dh2048.pem already exists."
    fi
}

function make_server_cert() {
    output 'Server CSR'

    openssl req \
	    -config $openssl_conf \
	    -newkey rsa:4096 \
	    -keyout certs/server_key.pem \
	    -out certs/server.req \
	    -nodes \
	    -subj '/C=CH/ST=Zurich/L=Winterthur/O=BA PKI Demo/OU=VPN Server/CN=vpn_server' >/dev/null

    output 'Sign Server CSR'
    openssl ca \
	    -batch \
	    -config $openssl_conf \
	    -create_serial \
	    -days 365 \
	    -extensions 'no_ca'\
	    -out certs/server_cert.pem\
	    -in certs/server.req
    
    
    openssl x509 -noout -subject -issuer -in certs/server_cert.pem
}

function make_ca() {
    output 'CA'
    openssl req \
	    -config $openssl_conf \
	    -x509 \
	    -newkey rsa:4096 \
	    -keyout certs/ca_key.pem \
	    -out certs/ca_cert.pem \
	    -days 365 \
	    -nodes \
	    -extensions 'ca_ext' \
	    -subj '/C=CH/ST=Zurich/L=Winterthur/O=BA PKI Demo/CN=DEMO CA' >/dev/null
    openssl x509 -noout -subject -issuer -in certs/ca_cert.pem
    
    output 'CA PKCS12'
    
    openssl pkcs12 \
	    -export \
	    -in certs/ca_cert.pem \
	    -inkey certs/ca_key.pem \
	    -out certs/ca.pkcs12 \
	    -name "Client CA" \
	    -password 'pass:changeit'

    openssl pkcs12 \
	    -info \
	    -noout \
	    -password 'pass:changeit' \
	    -in certs/ca.pkcs12
}

output 'Create CA and Server Certificate'

mkdir -p certs

generate_config
make_ca
make_server_cert
make_dh_file
